{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Cell","className","this","props","selected","letter","React","Component","LETTERS","split","DisplayText","text","MODES","App","onKeyDown","e","code","moveDelta","action","backspace","console","log","state","letters","selectedRow","selectedCol","inputText","mode","map","row","rowIdx","colIdx","colSelected","rowSelected","cellSelected","document","addEventListener","removeEventListener","setState","stateUpdate","currentLetter","length","substring","dCol","dRow","maxRow","maxCol","Math","min","max","renderLetters","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8e96e538.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from \"react\";\n\nclass Cell extends React.Component {\n  render() {\n    return (\n      <div\n        className={\n          this.props.selected\n            ? \"letters-cell letters-cell-selected\"\n            : \"letters-cell\"\n        }\n      >\n        {this.props.letter}\n      </div>\n    );\n  }\n}\n\nclass Board extends React.Component {}\n\nconst LETTERS = [\n  \"АБВГД\".split(\"\"),\n  \"ЕЁЖЗИ\".split(\"\"),\n  \"ЙКЛМН\".split(\"\"),\n  \"ОПРСТ\".split(\"\"),\n  \"УФХЦЧ\".split(\"\"),\n  \"ШЩЪЫЬ\".split(\"\"),\n  \"ЭЮЯ.,\".split(\"\"),\n];\n\nclass DisplayText extends React.Component {\n  render() {\n    return <div className=\"display-text\">{this.props.text}</div>;\n  }\n}\n\nconst MODES = {\n  SELECTING_ROW: \"SELECTING_ROW\",\n  SELECTING_COL: \"SELECTING_COL\",\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      letters: LETTERS,\n      selectedRow: 0,\n      selectedCol: 0,\n      inputText: \"\",\n      mode: MODES.SELECTING_ROW,\n    };\n  }\n\n  renderLetters() {\n    return this.state.letters.map((row, rowIdx) => {\n      return (\n        <div className={\"letters-row\"}>\n          {row.map((letter, colIdx) => {\n            const colSelected = this.state.selectedCol === colIdx;\n            const rowSelected = this.state.selectedRow === rowIdx;\n\n            let cellSelected = false;\n            if (this.state.mode === MODES.SELECTING_ROW) {\n              cellSelected = rowSelected;\n            } else {\n              cellSelected = rowSelected && colSelected;\n            }\n            return <Cell selected={cellSelected} letter={letter} />;\n          })}\n        </div>\n      );\n    });\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown);\n  }\n\n  onKeyDown = (e) => {\n    switch (e.code) {\n      case \"ArrowLeft\":\n        this.moveDelta(-1, 0);\n        break;\n      case \"ArrowUp\":\n        this.moveDelta(0, -1);\n        break;\n      case \"ArrowDown\":\n        this.moveDelta(0, 1);\n        break;\n      case \"ArrowRight\":\n        this.moveDelta(1, 0);\n        break;\n      case \"Enter\":\n        this.action();\n        break;\n      case \"Backspace\":\n        this.backspace();\n        break;\n      default:\n        console.log(`Handling key code=\"${e.code}\"`);\n    }\n  };\n\n  action() {\n    this.setState((state) => {\n      const mode =\n        state.mode === MODES.SELECTING_ROW\n          ? MODES.SELECTING_COL\n          : MODES.SELECTING_ROW;\n\n      let stateUpdate = { mode };\n\n      if (state.mode === MODES.SELECTING_COL) {\n        const currentLetter = state.letters[state.selectedRow][\n          state.selectedCol\n        ];\n        stateUpdate.inputText = state.inputText + currentLetter;\n        stateUpdate.selectedCol = 0;\n        stateUpdate.selectedRow = 0;\n      }\n\n      return stateUpdate;\n    });\n  }\n\n  finishWord() {\n    this.setState((state) => {\n      const inputText = state.inputText.length > 0 ? state.inputText + \" \" : \"\";\n      return {\n        inputText,\n        selectedCol: 0,\n        selectedRow: 0,\n      };\n    });\n  }\n\n  backspace() {\n    this.setState((state) => {\n      const inputText =\n        state.inputText.length > 0\n          ? state.inputText.substring(0, state.inputText.length - 1)\n          : \"\";\n      return {\n        inputText,\n      };\n    });\n  }\n\n  moveDelta(dCol, dRow) {\n    this.setState((state, props) => {\n      if (state.mode === MODES.SELECTING_COL && dRow !== 0) {\n        return {\n          mode: MODES.SELECTING_ROW,\n          selectedCol: 0,\n        }\n      }\n      if (state.mode === MODES.SELECTING_COL) {\n        dRow = 0;\n      } else {\n        dCol = 0;\n      }\n      const maxRow = state.letters.length - 1;\n      const maxCol = state.letters[state.selectedRow].length - 1;\n      const tryCol = Math.min(Math.max(0, state.selectedCol + dCol), maxCol);\n      const tryRow = Math.min(Math.max(0, state.selectedRow + dRow), maxRow);\n      return {\n        selectedCol: tryCol,\n        selectedRow: tryRow,\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"letters-container\">{this.renderLetters()}</div>\n        <DisplayText text={this.state.inputText} />\n        <div>\n          Current row={this.state.selectedRow}, col={this.state.selectedCol}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}