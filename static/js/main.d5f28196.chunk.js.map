{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Cell","React","forwardRef","ref","selected","letter","isScroller","cls","classNames","className","ControlButton","kind","onClick","Board","letters","selectedCol","selectedRow","mode","onSelectRow","onSelectRowAndCol","rowRefs","useRef","colRefs","rowsCount","length","colsCount","handleRowTouch","lastTouch","isTouchEnd","currentRowIdx","idx","current","el","extraShift","offsetHeight","top","offsetTop","bottom","clientY","findRowIdx","currentColIdx","left","offsetLeft","right","offsetWidth","clientX","findColIdx","Array","keys","map","_","createRef","V_SCROLLER","lettersWithPlaceholders","row","rowIdx","push","content","colIdx","isVScroller","isHScroller","colSelected","rowSelected","cellSelected","MODES","SELECTING_ROW","toString","onTouchStart","ev","changedTouches","onTouchMove","onTouchEnd","Controller","onLeft","onRight","onUp","onDown","onCenter","onBackspace","LETTERS","split","DisplayText","text","placeholder","SELECTING_COL","App","props","onKeyDown","e","code","action","backspace","console","log","setState","state","maxRow","tryRow","Math","min","max","maxCol","tryCol","currentLetter","inputText","moveDelta","document","addEventListener","this","removeEventListener","stateUpdate","substring","dCol","dRow","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d5f28196.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { createRef, useRef } from \"react\";\nimport classNames from \"classnames\";\n\nconst Cell = React.forwardRef(({ selected, letter, isScroller }, ref) => {\n  const cls = classNames(\"noselect\", \"letters-cell\", {\n    \"letters-cell-selected\": selected,\n    \"letters-cell-scroller\": isScroller,\n  });\n  if (isScroller) {\n    return <div className={cls}></div>;\n  }\n  return (\n    <div className={cls} ref={ref}>\n      {letter}\n    </div>\n  );\n});\n\nfunction ControlButton({ kind, onClick, letter }) {\n  return (\n    <div className={`noselect control-button control-button-${kind}`}>\n      <button className=\"noselect control-button-inner\" onClick={onClick}>\n        {letter}\n      </button>\n    </div>\n  );\n}\n\nfunction Board({\n  letters,\n  selectedCol,\n  selectedRow,\n  mode,\n  onSelectRow,\n  onSelectRowAndCol,\n}) {\n  const rowRefs = useRef([]);\n  const colRefs = useRef([]);\n  const rowsCount = letters.length;\n  const colsCount = letters[0].length;\n  rowRefs.current = [...Array(rowsCount).keys()].map(\n    (_, idx) => rowRefs.current[idx] ?? createRef()\n  );\n  colRefs.current = [...Array(colsCount).keys()].map(\n    (_, idx) => colRefs.current[idx] ?? createRef()\n  );\n\n  function findRowIdx(lastTouch) {\n    for (let idx = 0; idx < rowRefs.current.length; idx++) {\n      const el = rowRefs.current[idx].current;\n      const extraShift = el.offsetHeight;\n      const top = el.offsetTop + extraShift;\n      const bottom = el.offsetTop + el.offsetHeight + extraShift;\n      if (top <= lastTouch.clientY && lastTouch.clientY <= bottom) {\n        return idx;\n      }\n    }\n    return null;\n  }\n\n  function findColIdx(lastTouch) {\n    for (let idx = 0; idx < colRefs.current.length; idx++) {\n      const el = colRefs.current[idx].current;\n      // const extraShift = el.offsetWidth;\n      const left = el.offsetLeft;\n      const right = el.offsetLeft + el.offsetWidth;\n      if (left <= lastTouch.clientX && lastTouch.clientX <= right) {\n        return idx;\n      }\n    }\n    return null;\n  }\n\n  function handleRowTouch(lastTouch, isTouchEnd) {\n    const currentRowIdx = findRowIdx(lastTouch);\n    const currentColIdx = findColIdx(lastTouch);\n    if (currentColIdx != null && currentRowIdx != null) {\n      onSelectRowAndCol(currentRowIdx, currentColIdx, isTouchEnd);\n    } else if (currentRowIdx != null) {\n      onSelectRow(currentRowIdx);\n    }\n  }\n\n  function handleTouchStart(ev) {\n    handleRowTouch(ev.changedTouches[0]);\n  }\n\n  function handleTouchMove(ev) {\n    handleRowTouch(ev.changedTouches[0]);\n  }\n\n  function handleTouchEnd(ev) {\n    handleRowTouch(ev.changedTouches[0], true);\n  }\n\n  const V_SCROLLER = \"=\";\n  const H_SCROLLER = \"&\";\n  let lettersWithPlaceholders = letters.map((row, rowIdx) =>\n    rowIdx === 0 ? [V_SCROLLER, ...row] : [V_SCROLLER, ...row]\n  );\n  lettersWithPlaceholders.push([\n    V_SCROLLER,\n    ...[...Array(colsCount).keys()].map(() => H_SCROLLER),\n  ]);\n\n  const content = lettersWithPlaceholders.map((row, rowIdx) => {\n    return (\n      <div\n        className={\"letters-row\"}\n        key={rowIdx.toString()}\n        ref={rowRefs.current[rowIdx]}\n      >\n        {row.map((letter, colIdx) => {\n          const isVScroller = letter === V_SCROLLER;\n          const isHScroller = letter === H_SCROLLER;\n\n          // First column is V_SCROLLER, so real column index is one less.\n          const colSelected = selectedCol === colIdx - 1;\n          // For V_SCROLLER cell, highlight one below selected.\n          const rowSelected = isVScroller\n            ? selectedRow === rowIdx - 1\n            : selectedRow === rowIdx;\n\n          let cellSelected = false;\n          if (mode === MODES.SELECTING_ROW) {\n            cellSelected = rowSelected;\n          } else {\n            cellSelected = rowSelected && colSelected;\n          }\n\n          return (\n            <Cell\n              selected={cellSelected}\n              isScroller={isVScroller || isHScroller}\n              letter={letter}\n              key={colIdx.toString()}\n              ref={\n                // Store references for first row only, excluding V_SCROLLER column.\n                rowIdx === 0 && colIdx > 0 ? colRefs.current[colIdx - 1] : null\n              }\n            />\n          );\n        })}\n      </div>\n    );\n  });\n\n  return (\n    <div\n      className=\"letters-container\"\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    >\n      {content}\n    </div>\n  );\n}\n\nfunction Controller({ onLeft, onRight, onUp, onDown, onCenter, onBackspace }) {\n  return (\n    <div className=\"controller\">\n      <ControlButton kind=\"left\" letter=\"⬅️\" onClick={onLeft} />\n      <ControlButton kind=\"right\" letter=\"➡️\" onClick={onRight} />\n      <ControlButton kind=\"up\" letter=\"⬆️\" onClick={onUp} />\n      <ControlButton kind=\"down\" letter=\"⬇️\" onClick={onDown} />\n      <ControlButton kind=\"center\" letter=\"🟢\" onClick={onCenter} />\n      <ControlButton kind=\"backspace\" letter=\"⏮\" onClick={onBackspace} />\n    </div>\n  );\n}\n\nconst LETTERS = [\n  \"АБВГД\".split(\"\"),\n  \"ЕЁЖЗИ\".split(\"\"),\n  \"ЙКЛМН\".split(\"\"),\n  \"ОПРСТ\".split(\"\"),\n  \"УФХЦЧ\".split(\"\"),\n  \"ШЩЪЫЬ\".split(\"\"),\n  \"ЭЮЯ.,\".split(\"\"),\n];\n\nfunction DisplayText({ text }) {\n  const placeholder = (text ?? \"\").length === 0;\n  const placeholderText = \"Здесь будет текст\";\n  const cls = classNames(\"noselect\", \"display-text\", {\n    \"display-text-placeholder\": placeholder,\n  });\n  return <div className={cls}>{placeholder ? placeholderText : text}</div>;\n}\n\nconst MODES = {\n  SELECTING_ROW: \"SELECTING_ROW\",\n  SELECTING_COL: \"SELECTING_COL\",\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      letters: LETTERS,\n      selectedRow: 0,\n      selectedCol: 0,\n      inputText: \"\",\n      mode: MODES.SELECTING_ROW,\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown);\n  }\n\n  onKeyDown = (e) => {\n    switch (e.code) {\n      case \"ArrowLeft\":\n        this.onLeft();\n        break;\n      case \"ArrowUp\":\n        this.onUp();\n        break;\n      case \"ArrowDown\":\n        this.onDown();\n        break;\n      case \"ArrowRight\":\n        this.onRight();\n        break;\n      case \"Enter\":\n        this.action();\n        break;\n      case \"Backspace\":\n        this.backspace();\n        break;\n      default:\n        console.log(`Handling key code=\"${e.code}\"`);\n    }\n  };\n\n  onSelectRow = (rowIdx) => {\n    this.setState((state) => {\n      const maxRow = state.letters.length - 1;\n      const tryRow = Math.min(Math.max(0, rowIdx), maxRow);\n      return {\n        mode: MODES.SELECTING_ROW,\n        selectedCol: state.selectedCol,\n        selectedRow: tryRow,\n      };\n    });\n  };\n\n  onSelectRowAndCol = (rowIdx, colIdx, isTouchEnd) => {\n    this.setState((state) => {\n      const maxRow = state.letters.length - 1;\n      const maxCol = state.letters[state.selectedRow].length - 1;\n      const tryCol = Math.min(Math.max(0, colIdx), maxCol);\n      const tryRow = Math.min(Math.max(0, rowIdx), maxRow);\n\n      if (isTouchEnd) {\n        const currentLetter =\n          state.letters[state.selectedRow][state.selectedCol];\n        return {\n          mode: MODES.SELECTING_ROW,\n          selectedCol: tryCol,\n          selectedRow: tryRow,\n          inputText: state.inputText + currentLetter,\n        };\n      }\n\n      return {\n        mode: MODES.SELECTING_COL,\n        selectedCol: tryCol,\n        selectedRow: tryRow,\n      };\n    });\n  };\n\n  action() {\n    this.setState((state) => {\n      const mode =\n        state.mode === MODES.SELECTING_ROW\n          ? MODES.SELECTING_COL\n          : MODES.SELECTING_ROW;\n\n      let stateUpdate = { mode };\n\n      if (state.mode === MODES.SELECTING_COL) {\n        const currentLetter =\n          state.letters[state.selectedRow][state.selectedCol];\n        stateUpdate.inputText = state.inputText + currentLetter;\n        stateUpdate.selectedCol = 0;\n        stateUpdate.selectedRow = 0;\n      }\n\n      return stateUpdate;\n    });\n  }\n\n  finishWord() {\n    this.setState((state) => {\n      const inputText = state.inputText.length > 0 ? state.inputText + \" \" : \"\";\n      return {\n        inputText,\n        selectedCol: 0,\n        selectedRow: 0,\n      };\n    });\n  }\n\n  backspace() {\n    this.setState((state) => {\n      const inputText =\n        state.inputText.length > 0\n          ? state.inputText.substring(0, state.inputText.length - 1)\n          : \"\";\n      return {\n        inputText,\n      };\n    });\n  }\n\n  moveDelta(dCol, dRow) {\n    this.setState((state, props) => {\n      if (state.mode === MODES.SELECTING_COL && dRow !== 0) {\n        return {\n          mode: MODES.SELECTING_ROW,\n          selectedCol: 0,\n        };\n      }\n      if (state.mode === MODES.SELECTING_COL) {\n        dRow = 0;\n      } else {\n        dCol = 0;\n      }\n      const maxRow = state.letters.length - 1;\n      const maxCol = state.letters[state.selectedRow].length - 1;\n      const tryCol = Math.min(Math.max(0, state.selectedCol + dCol), maxCol);\n      const tryRow = Math.min(Math.max(0, state.selectedRow + dRow), maxRow);\n      return {\n        selectedCol: tryCol,\n        selectedRow: tryRow,\n      };\n    });\n  }\n\n  onLeft = () => {\n    this.moveDelta(-1, 0);\n  };\n\n  onRight = () => {\n    this.moveDelta(1, 0);\n  };\n\n  onUp = () => {\n    this.moveDelta(0, -1);\n  };\n\n  onDown = () => {\n    this.moveDelta(0, 1);\n  };\n\n  onCenter = () => {\n    this.action();\n  };\n\n  onBackspace = () => {\n    this.backspace();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <DisplayText text={this.state.inputText} />\n        <Board\n          letters={this.state.letters}\n          selectedCol={this.state.selectedCol}\n          selectedRow={this.state.selectedRow}\n          mode={this.state.mode}\n          onSelectRow={this.onSelectRow}\n          onSelectRowAndCol={this.onSelectRowAndCol}\n        />\n        <Controller\n          onLeft={this.onLeft}\n          onRight={this.onRight}\n          onCenter={this.onCenter}\n          onUp={this.onUp}\n          onDown={this.onDown}\n          onBackspace={this.onBackspace}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}